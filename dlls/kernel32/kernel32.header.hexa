// Copyright (C) 2022-2024 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

@linkName('LocalAlloc')
declare
fun localAlloc(flags UInt32, bytes SizeOfPointer) HLocal

@linkName('HeapAlloc')
@dllImport
@rename('HeapAlloc')
declare
fun heapAlloc(heap Handle, flags UInt32, bytes SizeOfPointer) ArrayPointer<Void>
// TODO
// let kernel32 = "kernel32.dll" (uppercase?)
// @dllImport(kernel32) (fpc)
// Generate .dllImport.txt where each line is libgen argument list line-per-dll

declare VoidPointer = ConstArrayPointer<Void>

// TODO only header here, impl in other files
fun heapFree(
	hHeap Handle,
	dwFlags UInt32,
	lpMem VoidPointer
) Bool32 {
	return Bool32.True // TODO
}

fun mulDiv(
	nNumber Int,
	nNumerator Int,
	nDenominator Int
) {
	return 0 // TODO
}

fun wideCharToMultiByte(
	codePage UInt32,
	dwFlags UInt32,
	lpWideCharStr ConstArrayPointer<ClangWideChar>,
	cchWideChar Int,
	lpMultiByteStr ArrayPointer<ClangChar>,
	cbMultiByte Int,
	lpDefaultChar ConstArrayPointer<ClangChar>,
	lpUsedDefaultChar ArrayPointer<Bool>
) Int {
	return 0 // TODO
}

fun getProcessHeap() Handle {
	return null // TODO
}

fun setLastError(
	dwErrCode UInt32
) Void {
	// TODO
}

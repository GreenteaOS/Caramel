// Copyright (C) 2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

// Entry point of the project

@customHeader('
void *tmemcpy(void *dest, const void *src, uint64_t count) {
	tofitaDebugLog_(L"tmemcpy", (uint64_t)((int32_t)0), (uint64_t)((int32_t)0));
	uint8_t *dst8 = (uint8_t *)dest;
	const uint8_t *src8 = (const uint8_t *)src;

	while (count--) {
		*dst8++ = *src8++;
	}

	return dest;
}
// TODO
#define memcpy(z,u,x) tmemcpy(z,u,x)

#define HEXA_NO_DEFAULT_INCLUDES
#define HEXA_MAIN mainHexa
#define HeapAlloc heapAlloc_
#define GetProcessHeap() 0
// TODO ^
#define wprintf(z,...) {}
#define HEAP_ZERO_MEMORY ((void*)0)
#define fflush(z) {}
#define HEXA_UNREACHABLE(z) {}
#define stdout ((void*)0)
int64_t _fltused = 0;

#ifdef bit64
#else
int64_t __alldiv() asm("__alldiv");
int64_t __alldiv() { return 0; } // TODO

int64_t __allrem() asm("__allrem");
int64_t __allrem() { return 0; } // TODO

uint64_t __aulldiv() asm("__aulldiv");
uint64_t __aulldiv() { return 0; } // TODO

uint64_t __aullrem() asm("__aullrem");
uint64_t __aullrem() { return 0; } // TODO

void _memset() asm("_memset");
void _memset() {
	// TODO
	tofitaDebugLog_(L"startup _memset", (uint64_t)((int32_t)0), (uint64_t)((int32_t)0));

} // TODO TODO TODO
#endif

uint64_t bufferOffset_;
void startup() {
	// TODO hexa
	bufferOffset_ = (int32_t)0;
	HEXA_MAIN(0, nullptr);
}

#ifdef bit64
__attribute__((fastcall)) void _DllMainCRTStartup(void *, uint32_t, void *) {
	startup();
}
#else
// void* hinstDLL, uint32_t fdwReason, void* lpvReserved
__attribute__((stdcall)) void _DllMainCRTStartup(void *, void *, void *) {
	startup();
}
#endif
')
declare fun entry() Void

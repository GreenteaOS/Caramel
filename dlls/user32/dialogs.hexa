// Copyright (C) 1993, 1994, 1996 Alexandre Julliard
// Copyright (C) 2024 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

@struct
class DlgControlInfo {
	var style UInt32
	var exStyle UInt32
	var helpId UInt32
	var x Int16
	var y Int16
	var cx Int16
	var cy Int16
	var id SizeOfPointer
	var className ConstArrayPointer<ClangWideChar>
	var windowName ConstArrayPointer<ClangWideChar>
	var data ConstArrayPointer<Void>
}

@struct
class DlgTemplate {
	var style UInt32
	var exStyle UInt32
	var helpId UInt32
	var nbItems UInt16
	var x Int16
	var y Int16
	var cx Int16
	var cy Int16
	var menuName ConstArrayPointer<ClangWideChar>
	var className ConstArrayPointer<ClangWideChar>
	var caption ConstArrayPointer<ClangWideChar>
	var pointSize Int16
	var weight UInt16
	var italic Bool32
	var faceName ConstArrayPointer<ClangWideChar>
	var dialogEx Bool32
}

@struct
class RadioGroup {
	var firstID UInt32
	var lastID UInt32
	var checkID UInt32
}

fun dialog_GetControl32(p ConstArrayPointer<UInt16>, info DlgControlInfo, dialogEx Bool32) ConstArrayPointer<UInt16> {
	var p = p
	if dialogEx == Bool32.True {
		info.helpId = (p as! ConstArrayPointer<UInt32>) [0]
		p = p.offsetItems(2)
		info.exStyle = (p as! ConstArrayPointer<UInt32>) [0]
		p = p.offsetItems(2)
		info.style = (p as! ConstArrayPointer<UInt32>) [0]
		p = p.offsetItems(2)
	} else {
		info.helpId = 0
		info.id = ((p) as! LONG) [0]
		info.style = (p as! ConstArrayPointer<UInt32>) [0]
		p = p.offsetItems(2)
		info.exStyle = (p as! ConstArrayPointer<UInt32>) [0]
		p = p.offsetItems(2)
	}

	info.x = p[0] as! Int16
	p = p.offsetItems(1)
	info.y = p[0] as! Int16
	p = p.offsetItems(1)
	info.cx = p[0] as! Int16
	p = p.offsetItems(1)
	info.cy = p[0] as! Int16
	p = p.offsetItems(1)

	if dialogEx == Bool32.True {
		p = p.offsetItems(2)
	} else {
		info.id = p[0] as! SizeOfPointer
		p = p.offsetItems(1)
	}

	if (((p) as! ConstArrayPointer<UInt16>) [0]) == 65535 {
		var class_names ArrayByValue<ConstArrayPointer<ClangWideChar>, 6 > = ["Button", "Edit", "Static", "ListBox", "ScrollBar", "ComboBox"]
		var id UInt16 = p.offsetItems(1) [0]

		if (id >= 128) and (id <= 133) {
			id -= 128
		}

		if id <= 5 {
			info.className = class_names[id]
		} else {
			info.className = null
		}

		p = p.offsetItems(2)
	} else {
		info.className = p
		p += lstrlenW(info.className) + 1
	}

	if (((p) as! ConstArrayPointer<UInt16>) [0]) == 65535 {
		info.windowName = (((((p + 1) as! ConstArrayPointer<UInt16>) [0]) as! UInt16) as! UInt32) as! ClangWideChar
		p = p.offsetItems(2)
	} else {
		info.windowName = p
		p = p.offsetItems(lstrlenW(info.windowName) + 1)
	}

		if ((__wine_dbch_dialog).flags & (1 << __WINE_DBCL_TRACE)) and (__wine_dbg_get_channel_flags(__wine_dbch_dialog) & (1 << __WINE_DBCL_TRACE)) {
	if (p [0]) != 0 {
			var i UInt16 = 0
			var count UInt16 = (((p) as! ConstArrayPointer<UInt16>) [0]) / sizeOf<UInt32>()
			i = 0
			while i < count {
				i++
			}
		}

		info.data = p
		p += (((p) as! ConstArrayPointer<UInt16>) [0]) / sizeOf<UInt32>()
	} else {
		info.data = null
	}

	return (((p as! SizeOfPointer) + 3) & ~3) as! ConstArrayPointer<UInt16>
	p = p.offsetItems(1)
}

fun dialog_CreateControls32(
	hwnd HWnd,
	template ConstArrayPointer<ClangChar>,
	dlgTemplate DlgTemplate,
	hInst HInstance,
	unicode Bool32
) Bool32 {
	var template = template
	var dlgInfo DIALOGINFO = dialog_get_info(hwnd, Bool32.True)
	var info DlgControlInfo = null
	var hwndCtrl HWnd = null
	var hwndDefButton HWnd = null
	var items Int32 = dlgTemplate.nbItems as! Int32

	while items-- != 0 {
		template = dialog_GetControl32(template as! ConstArrayPointer<UInt16>, info, dlgTemplate.dialogEx) as! ConstArrayPointer<ClangChar>
		info.style &= ~2147483648u32
		info.style |= 1073741824u32

		if info.style & 8388608u32 != 0 {
			info.style &= (~8388608 as! UInt32)
			info.exStyle |= 512u32
		}

		if unicode == Bool32.True {
			var caption ConstArrayPointer<ClangWideChar> = info.windowName
			var caption_buf ArrayByValue<ClangWideChar, 3> = [0]

			if ((((caption) as! UInt32) >> 16) == 0) and caption {
				caption_buf[0] = 65535
				caption_buf[1] = (((caption) as! UInt32) as! UInt32)
				caption_buf[2] = 0
				caption = caption_buf.ref
			}

			hwndCtrl = createWindowExW(info.exStyle | 4, info.className, caption, info.style | 1073741824, mulDiv(info.x, dlgInfo.xBaseUnit, 4), mulDiv(info.y, dlgInfo.yBaseUnit, 8), mulDiv(info.cx, dlgInfo.xBaseUnit, 4), mulDiv(info.cy, dlgInfo.yBaseUnit, 8), hwnd, info.id as! HMenu, hInst, info.data as! ArrayPointer<Void>)
		} else {
			var classRef ConstArrayPointer<ClangChar> = info.className as! ConstArrayPointer<ClangChar>
			var caption ConstArrayPointer<ClangChar> = info.windowName as! ConstArrayPointer<ClangChar>
			var class_tmp ArrayPointer<ClangChar> = null
			var caption_tmp ArrayPointer<ClangChar> = null
			var caption_buf ArrayByValue<ClangChar, 4> = [0]

				var len UInt32 = wideCharToMultiByte(0, 0, info.className, -1, null, 0, null, null)
				class_tmp = heapAlloc(getProcessHeap(), 0, len)
			if not (((classRef as! UInt32) >> 16) == 0) {
				wideCharToMultiByte(0, 0, info.className, -1, class_tmp, len as! Int32, null, null)
				classRef = class_tmp
			}

				var len UInt32 = wideCharToMultiByte(0, 0, info.windowName, -1, null, 0, null, null)
				caption_tmp = heapAlloc(getProcessHeap(), 0, len)
			if not (((caption as! UInt32) >> 16) == 0) {
				wideCharToMultiByte(0, 0, info.windowName, -1, caption_tmp, len as! Int32, null, null)
				caption = caption_tmp
			} else {
				if caption != null {
					caption_buf[0] = 255
					caption_buf[1] = (((caption) as! UInt32) as! UInt32)
					caption_buf[2] = (((caption) as! UInt32) as! UInt32) >> 8
					caption_buf[3] = 0
					caption = caption_buf.ref
				}
			}

			hwndCtrl = createWindowExA(info.exStyle | 4, classRef, caption, info.style | 1073741824, mulDiv(info.x, dlgInfo.xBaseUnit, 4), mulDiv(info.y, dlgInfo.yBaseUnit, 8), mulDiv(info.cx, dlgInfo.xBaseUnit, 4), mulDiv(info.cy, dlgInfo.yBaseUnit, 8), hwnd, info.id as! HMenu, hInst, info.data as! ArrayPointer<Void>)
			heapFree(getProcessHeap(), 0, class_tmp)
			heapFree(getProcessHeap(), 0, caption_tmp)
		}

		if hwndCtrl == null {
			if dlgTemplate.style & 16u32 != 0 {
				continue
			}

			setLastError(0)
			return 0
		}

		if dlgInfo.hUserFont != null {
			sendMessageW(hwndCtrl, 48u32, dlgInfo.hUserFont as! WParam, null)
		}

		if sendMessageW(hwndCtrl, 135u32, null, null) & 16i32 != 0 {
			if hwndDefButton != null {
				sendMessageW(hwndDefButton, 244u32, null, null)
			}

			hwndDefButton = hwndCtrl
			dlgInfo.idResult = getWindowLongA(hwndCtrl, -12) as! Int32
		}
	}

	return Bool32.True
}

fun dialog_ParseTemplate32(template ConstArrayPointer<ClangChar>, result DlgTemplate) ConstArrayPointer<ClangChar> {
	var p ConstArrayPointer<UInt16> = template as! ConstArrayPointer<UInt16>
	var signature UInt16 = 0
	var dlgver UInt16 = 0
	dlgver = p[0]
	p = p.offsetItems(1)
	signature = p[0]
	p = p.offsetItems(1)

	if dlgver == 1 and signature == 65535 {
		result.dialogEx = Bool32.True
		result.helpId = (p as! ConstArrayPointer<UInt32>) [0]
		p = p.offsetItems(2)
		result.exStyle = (p as! ConstArrayPointer<UInt32>) [0]
		p = p.offsetItems(2)
		result.style = (p as! ConstArrayPointer<UInt32>) [0]
		p = p.offsetItems(2)
	} else {
		result.style = ((p - 2) as! ConstArrayPointer<UInt32>) [0]
		result.dialogEx = 0
		result.helpId = 0
		result.exStyle = (p as! ConstArrayPointer<UInt32>) [0]
		p = p.offsetItems(2)
	}

	result.nbItems = p[0]
	p = p.offsetItems(1)
	result.x = p[0] as! Int16
	p = p.offsetItems(1)
	result.y = p[0] as! Int16
	p = p.offsetItems(1)
	result.cx = p[0] as! Int16
	p = p.offsetItems(1)
	result.cy = p[0] as! Int16
	p = p.offsetItems(1)
	switch p[0] as! Int32 {
		case 0:
			result.menuName = null
			p = p.offsetItems(1)
		case 65535:
			result.menuName = (((p.offsetItems(1) [0])) as! UInt32) as! ArrayPointer<ClangWideChar>
			p = p.offsetItems(2)
			{

			}
		case _:
			result.menuName = p
			{

			}
			p = p.offsetItemsBack(lstrlenW(result.menuName) + 1)
	}

	switch p[0] as! Int32 {
		case 0:
			result.className = ((32770 as! UInt16) as! UInt32) as! ConstArrayPointer<ClangWideChar>
			p = p.offsetItems(1)
		case 65535:
			result.className = (((p.offsetItems(1) [0])) as! UInt32) as! ArrayPointer<ClangWideChar>
			p = p.offsetItems(2)
			{

			}
		case _:
			result.className = p
			{

			}
			p = p.offsetItemsBack(lstrlenW(result.className) + 1)
	}

	result.caption = p
	p = p.offsetItemsBack(lstrlenW(result.caption) + 1)
	result.pointSize = 0
	result.faceName = null
	result.weight = 0
	result.italic = 0

	if result.style & 64u32 != 0 {
		result.pointSize = p[0] as! Int16
		p = p.offsetItems(1)

		if (result.pointSize as! Int32) == 32767 {

		} else {
			if result.dialogEx == Bool32.True {
				result.weight = p[0]
				p = p.offsetItems(1)
				result.italic = ((((p [0]) as! UInt32) & 255u32) as! UInt8) as! Bool32
				p = p.offsetItems(1)
			}

			result.faceName = p
			p = p.offsetItemsBack(lstrlenW(result.faceName) + 1)
		}
	}

	return (((p as! SizeOfPointer) + 3) & ~3) as! ConstArrayPointer<ClangChar>
}

fun dialog_CreateIndirect(
	hInst HInstance,
	dlgTemplate ConstArrayPointer<Void>,
	owner HWnd,
	dlgProc @noCapture @stdcall (HWnd, UInt32, WParam, LParam) => SignedSizeOfPointer,
	param LParam,
	unicode Bool32,
	modal_owner ArrayPointer<HWnd>
) HWnd {
	var dlgTemplate = dlgTemplate
	var owner = owner
	var hwnd HWnd = null
	var rect ByValue<Rect> = ByValue<Rect>()
	var pos ByValue<Point> = ByValue<Point>()
	var size ByValue<Size> = ByValue<Size>()
	var template DlgTemplate = null
	var dlgInfo DIALOGINFO = null
	var units UInt32 = getDialogBaseUnits()
	var disabled_owner HWnd = null
	var hMenu HMenu = null
	var hUserFont HFont = null
	var flags UInt32 = 0
	var xBaseUnit UInt32 = (((units) & 65535u32) as! UInt16) as! UInt32
	var yBaseUnit UInt32 = (((units) >> 16) as! UInt16) as! UInt32

	if dlgTemplate == null {
		return null
	}

	dlgTemplate = dialog_ParseTemplate32(dlgTemplate, template)

	if template.menuName != null {
		hMenu = loadMenuW(hInst, template.menuName)
	}

	if template.style & 64u32 != 0 {
		var dc HDc = ntUserGetDC(null)

		if (template.pointSize as! Int32) == 32767 {
			var ncMetrics ByValue<NonClientMetricsW> = ByValue<NonClientMetricsW>()
			ncMetrics.cbSize = sizeOf<UInt32>()

			if systemParametersInfoW(41, sizeOf<UInt32>(), ncMetrics, 0) {
				hUserFont = createFontIndirectW(ncMetrics.lfMessageFont)
			}
		} else {
			hUserFont = createFontW(-pixels, 0, 0, 0, template.weight, template.italic, 0, 0, 1 as! UInt8, 0, 0, 2, 0, template.faceName)
			var pixels Int32 = mulDiv(template.pointSize as! Int32, getDeviceCaps(dc, 90), 72)
		}

		if hUserFont != null {
			var charSize ByValue<Size> = ByValue<Size>()
			var hOldFont HFont = selectObject(dc, hUserFont)
			charSize.cx = gdiGetCharDimensions(dc, null, charSize.cy)

			if charSize.ref.cx != 0 {
				xBaseUnit = charSize.ref.cx as! UInt32
				yBaseUnit = charSize.ref.cy as! UInt32
			}

			selectObject(dc, hOldFont)
		}

		ntUserReleaseDC(null, dc)
	}

	setRect(rect, 0, 0, mulDiv(template.cx, xBaseUnit, 4), mulDiv(template.cy, yBaseUnit, 8))

		template.style &= ~((8388608 | 4194304) | 524288)
	if template.style & 1024u32 != 0 {
	}

	template.style |= 4u32

	if template.style & 128u32 != 0 {
		template.exStyle |= 1u32
	}

	if (template.style & 1024) or not (template.style & 1073741824) {
		template.exStyle |= 65536u32
	}

	adjustWindowRectEx(rect, template.style, hMenu != null, template.exStyle)
	pos.x = rect.left
	pos.y = rect.top
	size.cx = rect.right - rect.left
	size.cy = rect.bottom - rect.top

	if template.x == (32768 as! Int16) {
		pos.x = pos.y = (2147483648u32 as! Int32) as! Int32
	} else {
		var monitor HMonitor = null
		var mon_info ByValue<MonitorInfo> = ByValue<MonitorInfo>()
		mon_info.ref.cbSize = sizeOf<UInt32>() as! UInt32

		if template.style & 2048u32 != 0 {
			monitor = monitorFromWindow((owner) ? owner: getActiveWindow(), 1u32)
			pos.x = (mon_info.rcWork.left + mon_info.rcWork.right - size.cx) / 2i32
			pos.y = (mon_info.rcWork.top + mon_info.rcWork.bottom - size.cy) / 2i32
			getMonitorInfoW(monitor, mon_info.ref)
		} else {
			if template.style & 4096u32 != 0 {
				getCursorPos(pos.ref)
				monitor = monitorFromPoint(pos, 1u32)
				getMonitorInfoW(monitor, mon_info.ref)
			} else {
				pos.x += mulDiv(template.x, xBaseUnit, 4)
				pos.y += mulDiv(template.y, yBaseUnit, 8)

				if not (template.style & (1073741824 | 1)) {
					clientToScreen(owner, pos.ref)
				}
			}
		}

		if (template.style & 1073741824u32) == 0 {
			var dX Int32 = 0
			var dY Int32 = 0

				setRect(rect, pos.x, pos.y, pos.x + size.cx, pos.y + size.cy)
			if monitor == null {
				monitor = monitorFromRect(rect.ref, 1u32)
				getMonitorInfoW(monitor, mon_info.ref)
			}

			if (dX = pos.x + size.cx + getSystemMetrics(7) - mon_info.rcWork.right) > 0 {
				pos.x -= dX
			}

			if (dY = pos.y + size.cy + getSystemMetrics(8) - mon_info.rcWork.bottom) > 0 {
				pos.y -= dY
			}

			if pos.ref.x < mon_info.ref.rcWork.ref.left {
				pos.ref.x = mon_info.ref.rcWork.ref.left
			}

			if pos.ref.y < mon_info.ref.rcWork.ref.top {
				pos.ref.y = mon_info.ref.rcWork.ref.top
			}
		}
	}

	if modal_owner != null and owner != null {
		var parent HWnd = null

		while (getWindowLongW(owner, -16) & (2147483648u32 | 1073741824)) == 1073741824 {
			parent = getParent(owner)

			if parent == null or parent == getDesktopWindow() {
				break
			}

			owner = parent
		}

		modal_owner[0] = owner

		if isWindowEnabled(owner) == Bool32.True {
			disabled_owner = owner
			enableWindow(disabled_owner, 0)
		}
	}

		hwnd = createWindowExW(template.exStyle, template.className, template.caption, template.style & ~268435456, pos.x, pos.y, size.cx, size.cy, owner, hMenu, hInst, null)
	if unicode == Bool32.True {
	} else {
		var classRef ConstArrayPointer<ClangChar> = template.className as! ConstArrayPointer<ClangChar>
		var caption ConstArrayPointer<ClangChar> = template.caption as! ConstArrayPointer<ClangChar>
		var class_tmp ArrayPointer<ClangChar> = null
		var caption_tmp ArrayPointer<ClangChar> = null

			class_tmp = heapAlloc(getProcessHeap(), 0, len)
		if not (((classRef as! UInt32) >> 16) == 0) {
			var len UInt32 = wideCharToMultiByte(0, 0, template.className, -1, null, 0, null, null) as! UInt32
			wideCharToMultiByte(0, 0, template.className, -1, class_tmp, len as! Int32, null, null)
			classRef = class_tmp
		}

			caption_tmp = heapAlloc(getProcessHeap(), 0, len)
		if not (((caption as! UInt32) >> 16) == 0) {
			var len UInt32 = wideCharToMultiByte(0, 0, template.caption, -1, null, 0, null, null) as! UInt32
			wideCharToMultiByte(0, 0, template.caption, -1, caption_tmp, len as! Int32, null, null)
			caption = caption_tmp
		}

		hwnd = createWindowExA(template.exStyle, classRef, caption, template.style & ~268435456, pos.x, pos.y, size.cx, size.cy, owner, hMenu, hInst, null)
		heapFree(getProcessHeap(), 0, class_tmp)
		heapFree(getProcessHeap(), 0, caption_tmp)
	}

	if hwnd == null {
		if hUserFont != null {
			deleteObject(hUserFont)
		}

		if hMenu != null {
			ntUserDestroyMenu(hMenu)
		}

		if disabled_owner != null {
			enableWindow(disabled_owner, Bool32.True)
		}

		return null
	}

	dlgInfo = dialog_get_info(hwnd, Bool32.True)
	dlgInfo.hwndFocus = null
	dlgInfo.hUserFont = hUserFont
	dlgInfo.hMenu = hMenu
	dlgInfo.xBaseUnit = xBaseUnit
	dlgInfo.yBaseUnit = yBaseUnit
	dlgInfo.flags = flags

	if template.helpId != 0 {
		setWindowContextHelpId(hwnd, template.helpId)
	}

		setWindowLongW(hwnd, 0 + sizeOf<UInt32>(), dlgProc as! UInt32)
	if unicode == Bool32.True {
	} else {
		setWindowLongA(hwnd, 0 + sizeOf<UInt32>(), dlgProc as! UInt32)
	}

	if dlgProc != null and dlgInfo.hUserFont != null {
		sendMessageW(hwnd, 48u32, dlgInfo.hUserFont as! WParam, null)
	}

	if dialog_CreateControls32(hwnd, dlgTemplate, template, hInst, unicode) {
		var capture HWnd = null

		if dlgProc != null {
			var focus HWnd = getNextDlgTabItem(hwnd, null, 0)

			if focus == null {
				focus = getNextDlgGroupItem(hwnd, null, 0)
			}

			if sendMessageW(hwnd, 272, focus as! WParam, param) and isWindow(hwnd) and ((~template.style & 1024) or (template.style & 268435456)) {
				focus = getNextDlgTabItem(hwnd, 0, 0)

				if focus == null {
					focus = getNextDlgGroupItem(hwnd, null, 0)
				}

				if focus != null {
					if sendMessageW(focus, 135u32, null, null) & 8i32 != 0 {
						sendMessageW(focus, 177u32, null, 2147483647 as! LParam)
					}

					ntUserSetFocus(focus)
				} else {
					if (template.style & 1073741824u32) == 0 {
						ntUserSetFocus(hwnd)
					}
				}
			}
		}

		if modal_owner and (capture = getCapture()) {
			sendMessageW(capture, 31, 0, 0)
		}

		if template.style & 268435456 and not (getWindowLongW(hwnd, -16) & 268435456) {
			ntUserShowWindow(hwnd, 1)
		}

		return hwnd
	}

	if disabled_owner != null {
		enableWindow(disabled_owner, Bool32.True)
	}

	if isWindow(hwnd) == Bool32.True {
		ntUserDestroyWindow(hwnd)
	}

	return null
}

fun createDialogParamA(
	hInst HInstance,
	name ConstArrayPointer<ClangChar>,
	owner HWnd,
	dlgProc @noCapture @stdcall (HWnd, UInt32, WParam, LParam) => SignedSizeOfPointer,
	param LParam
) HWnd {
	var hrsrc HRsrc = null
	var ptr DLGTEMPLATE = null

	if not (hrsrc = findResourceA(hInst, name, (((5) as! UInt16) as! UInt32) as! ConstArrayPointer<ClangChar>)) {
		return null
	}

	if not (ptr = loadResource(hInst, hrsrc)) {
		return null
	}

	return createDialogIndirectParamA(hInst, ptr, owner, dlgProc, param)
}

fun createDialogParamW(
	hInst HInstance,
	name ConstArrayPointer<ClangWideChar>,
	owner HWnd,
	dlgProc @noCapture @stdcall (HWnd, UInt32, WParam, LParam) => SignedSizeOfPointer,
	param LParam
) HWnd {
	var hrsrc HRsrc = null
	var ptr DLGTEMPLATE = null

	if not (hrsrc = findResourceW(hInst, name, (((5) as! UInt16) as! UInt32) as! ClangWideChar)) {
		return null
	}

	if not (ptr = loadResource(hInst, hrsrc)) {
		return null
	}

	return createDialogIndirectParamW(hInst, ptr, owner, dlgProc, param)
}

fun createDialogIndirectParamAorW(
	hInst HInstance,
	dlgTemplate ConstArrayPointer<Void>,
	owner HWnd,
	dlgProc @noCapture @stdcall (HWnd, UInt32, WParam, LParam) => SignedSizeOfPointer,
	param LParam,
	flags UInt32
) HWnd {
	return dialog_CreateIndirect(hInst, dlgTemplate, owner, dlgProc, param, flags == 0, null)
}

fun createDialogIndirectParamA(
	hInst HInstance,
	dlgTemplate DLGTEMPLATE,
	owner HWnd,
	dlgProc @noCapture @stdcall (HWnd, UInt32, WParam, LParam) => SignedSizeOfPointer,
	param LParam
) HWnd {
	return createDialogIndirectParamAorW(hInst, dlgTemplate, owner, dlgProc, param, 2)
}

fun createDialogIndirectParamW(
	hInst HInstance,
	dlgTemplate DLGTEMPLATE,
	owner HWnd,
	dlgProc @noCapture @stdcall (HWnd, UInt32, WParam, LParam) => SignedSizeOfPointer,
	param LParam
) HWnd {
	return createDialogIndirectParamAorW(hInst, dlgTemplate, owner, dlgProc, param, 0)
}

fun dialog_DoDialogBox(hwnd HWnd, owner HWnd) Int32 {
	var dlgInfo DIALOGINFO = null
	var msg ByValue<Msg> = ByValue<Msg>()
	var retval Int32 = 0
	var bFirstEmpty Bool32 = null

	if (dlgInfo = dialog_get_info(hwnd, 0)) == null {
		return - 1
	}

	bFirstEmpty = Bool32.True

	if (dlgInfo.flags & 1u32) == 0 {
		while true {
			if peekMessageW(msg.ref, null, 0, 0, 1u32) == Bool32.False {
				if bFirstEmpty == Bool32.True {
					ntUserShowWindow(hwnd, 1)
					bFirstEmpty = Bool32.False
				}

				if (getWindowLongW(hwnd, -16) & 256) == 0 {
					sendMessageW(owner, 289u32, null, hwnd as! LParam)
				}

				getMessageW(msg.ref, null, 0, 0)
			}

			if msg.ref.message == Message.WM_QUIT {
				postQuitMessage(msg.ref.wParam as! Int32)

				if isWindow(hwnd) == Bool32.False {
					return 0
				}

				break
			}

			if isWindow(hwnd) == Bool32.False {
				return 0
			}

			if not (dlgInfo.flags & 1) and not isDialogMessageW(hwnd, msg) {
				translateMessage(msg.ref)
				dispatchMessageW(msg.ref)
			}

			if isWindow(hwnd) == Bool32.False {
				return 0
			}

			if dlgInfo.flags & 1u32 != 0 {
				break
			}

			if bFirstEmpty == Bool32.True and msg.message == 275u32 {
				// TODO actually just call `ShowWindow(hwnd, SW_SHOWNORMAL)`?
				ntUserShowWindow(hwnd, 1)
				bFirstEmpty = Bool32.False
			}
		}
	}

	retval = dlgInfo.idResult
	ntUserDestroyWindow(hwnd)
	return retval
}

fun dialogBoxParamA(
	hInst HInstance,
	name ConstArrayPointer<ClangChar>,
	owner HWnd,
	dlgProc @noCapture @stdcall (HWnd, UInt32, WParam, LParam) => SignedSizeOfPointer,
	param LParam
) SignedSizeOfPointer {
	var hwnd HWnd = null
	var hrsrc HRsrc = null
	var ptr DLGTEMPLATE = null

	if owner != null and isWindow(owner) == Bool32.False {
		return 0
	}

	if not (hrsrc = findResourceA(hInst, name, (((5) as! UInt16) as! UInt32) as! ConstArrayPointer<ClangChar>)) {
		return - 1
	}

	if not (ptr = loadResource(hInst, hrsrc)) {
		return - 1
	}

	if not (hwnd = dialog_CreateIndirect(hInst, ptr, owner, dlgProc, param, 0, owner)) {
		return - 1
	}

	return dialog_DoDialogBox(hwnd, owner)
}

fun dialogBoxParamW(
	hInst HInstance,
	name ConstArrayPointer<ClangWideChar>,
	owner HWnd,
	dlgProc @noCapture @stdcall (HWnd, UInt32, WParam, LParam) => SignedSizeOfPointer,
	param LParam
) SignedSizeOfPointer {
	var hwnd HWnd = null
	var hrsrc HRsrc = null
	var ptr DLGTEMPLATE = null

	if owner != null and isWindow(owner) == Bool32.False {
		return 0
	}

	if not (hrsrc = findResourceW(hInst, name, (((5) as! UInt16) as! UInt32) as! ClangWideChar)) {
		return - 1
	}

	if not (ptr = loadResource(hInst, hrsrc)) {
		return - 1
	}

	if not (hwnd = dialog_CreateIndirect(hInst, ptr, owner, dlgProc, param, 1, owner)) {
		return - 1
	}

	return dialog_DoDialogBox(hwnd, owner)
}

fun dialogBoxIndirectParamAorW(
	hInstance HInstance,
	template ConstArrayPointer<Void>,
	owner HWnd,
	dlgProc @noCapture @stdcall (HWnd, UInt32, WParam, LParam) => SignedSizeOfPointer,
	param LParam,
	flags UInt32
) SignedSizeOfPointer {
	var hwnd HWnd = dialog_CreateIndirect(hInstance, template, owner, dlgProc, param, flags == 0, owner)

	if hwnd != null {
		return dialog_DoDialogBox(hwnd, owner)
	}

	// TODO format
	return - 1
}

fun dialogBoxIndirectParamA(
	hInstance HInstance,
	template DLGTEMPLATE,
	owner HWnd,
	dlgProc @noCapture @stdcall (HWnd, UInt32, WParam, LParam) => SignedSizeOfPointer,
	param LParam
) SignedSizeOfPointer {
	return dialogBoxIndirectParamAorW(hInstance, template, owner, dlgProc, param, 2)
}

fun dialogBoxIndirectParamW(
	hInstance HInstance,
	template DLGTEMPLATE,
	owner HWnd,
	dlgProc @noCapture @stdcall (HWnd, UInt32, WParam, LParam) => SignedSizeOfPointer,
	param LParam
) SignedSizeOfPointer {
	return dialogBoxIndirectParamAorW(hInstance, template, owner, dlgProc, param, 0)
}

fun endDialog(hwnd HWnd, retval SignedSizeOfPointer) Bool32 {
	var dlgInfo DIALOGINFO = null
	var owner HWnd = null

	if (dlgInfo = dialog_get_info(hwnd, 0)) == null {
		return 0
	}

	dlgInfo.idResult = retval as! Int32
	dlgInfo.flags |= 1u32
	owner = getWindowLongA(hwnd, -8) as! HWnd

	if owner != null {
		enableWindow(owner, Bool32.True)
	}

	if isChild(hwnd, getFocus()) == Bool32.True {
		ntUserSetFocus(hwnd)
	}

	ntUserSetWindowPos(hwnd, null, 0, 0, 0, 0, 2 | 1 | 4 | 16 | 128 as! UInt32)

	if hwnd == getActiveWindow() {
		if owner != null {
			setForegroundWindow(owner)
		} else {
			ntUserActivateOtherWindow(hwnd)
		}
	}

	postMessageA(hwnd, 0, null, null)
	return Bool32.True
}

fun dialog_IsAccelerator(hwnd HWnd, hwndDlg HWnd, wParam WParam) Bool32 {
	var hwndControl HWnd = hwnd
	var hwndNext HWnd = null
	var dlgCode Int32 = 0
	var buffer ArrayByValue<ClangWideChar, 128> = [0]

	do {
		var style UInt32 = getWindowLongW(hwndControl, -16) as! UInt32

		if (style & (268435456 | 134217728)) == 268435456 {
			dlgCode = sendMessageW(hwndControl, 135u32, null, null) as! Int32

			if (dlgCode & (8192 | 256)) and getWindowTextW(hwndControl, buffer, sizeOf<UInt32>() / sizeOf<UInt32>()) {
				var p ClangWideChar = buffer - 2

				do {
				} while p != (null) and p[1] == 38
					p = wcschr(p + 2, 38u16)

				if p != (null) and towupper(p [1]) == towupper(wParam) {
					if (dlgCode & 256) != 0 or (style & 15u32) == 7u32 {
						sendMessageW(hwndDlg, 40u32, hwndControl as! WParam, 1 as! LParam)
						sendMessageW(hwndDlg, 40u32, null, null)
					} else {
						if dlgCode & 8192 != 0 {
							sendMessageW(hwndControl, 245u32, null, null)
						}
					}

					return Bool32.True
				}
			}

			hwndNext = getWindow(hwndControl, 5u32)
		} else {
			hwndNext = null
		}

		if hwndNext == null {
			hwndNext = getWindow(hwndControl, 2u32)
		}

		while hwndNext == null and hwndControl != null {
			hwndControl = getParent(hwndControl)

			if hwndControl == hwndDlg {
				if hwnd == hwndDlg {
					hwndNext = hwnd
					break
				}

				hwndNext = getWindow(hwndDlg, 5u32)
			} else {
				hwndNext = getWindow(hwndControl, 2u32)
			}
		}

		hwndControl = hwndNext
	} while hwndControl != null and (hwndControl != hwnd)
	return 0
}

fun dialog_FindMsgDestination(hwndDlg HWnd) HWnd {
	var hwndDlg = hwndDlg
	while getWindowLongA(hwndDlg, -16) & 1024 != 0 {
		var hParent HWnd = getParent(hwndDlg)

		if hParent == null or win_IsCurrentProcess(hParent) == null {
			break
		}

		if ntUserGetDialogInfo(hParent) == null {
			break
		}

		hwndDlg = hParent
	}

	return hwndDlg
}

fun dialog_FixOneChildOnChangeFocus(hwndChild HWnd, lParam LParam) Bool32 {
	if 16i32 & sendMessageW(hwndChild, 135u32, null, null) != 0 {
		sendMessageW(hwndChild, 244u32, null, 1 as! LParam)
	}

	return Bool32.True
}

fun dialog_FixChildrenOnChangeFocus(hwndDlg HWnd, hwndNext HWnd) Void {
	var dlgcode_next Int32 = sendMessageW(hwndNext, 135u32, null, null) as! Int32
	enumChildWindows(hwndDlg, dialog_FixOneChildOnChangeFocus, null)

		var def_id UInt32 = sendMessageW(hwndDlg, 1024 + 0, 0, 0)
	if dlgcode_next & 16 != 0 {

		if ((((def_id) as! UInt32) >> 16) as! UInt16) == 21323 {
			var hwndDef HWnd = null
			def_id = ((((def_id) as! UInt32) & 65535) as! UInt16)
			hwndDef = getDlgItem(hwndDlg, def_id)

				var dlgcode_def Int32 = sendMessageW(hwndDef, 135, 0, 0)
			if hwndDef != null {

				if (dlgcode_def & 8192) and (dlgcode_def & 32) {
					sendMessageW(hwndDef, 244u32, 1 as! WParam, 1 as! LParam)
				}
			}
		}
	} else {
		if (dlgcode_next & 8192) and (dlgcode_next & 32) {
			sendMessageW(hwndNext, 244u32, 1 as! WParam, 1 as! LParam)
		}
	}
}

fun dialog_IdToHwnd(hwndDlg HWnd, id Int32) HWnd {
	var i Int32 = 0
	var list ArrayPointer<HWnd> = win_ListChildren(hwndDlg)
	var ret HWnd = null

	if list == null {
		return null
	}

	i = 0
	while list[i] {
		{
			if getWindowLongW(list [i], -12) == (id as! Int32) {
				ret = list[i]
				break
			}

			if (ret = dialog_IdToHwnd(list [i], id)) != null {
				break
			}
		}

		i++
	}

	heapFree(getProcessHeap(), 0, list)
	return ret
}

fun isDialogMessageW(hwndDlg HWnd, msg Msg) Bool32 {
	var hwndDlg = hwndDlg
	var dlgCode Int32 = 0

	if isWindow(hwndDlg) == Bool32.False {
		return Bool32.False
		// TODO `return 0` compiles
	}

	if ntUserCallMsgFilter(msg, 0) == Bool32.True {
		return Bool32.True
	}

	hwndDlg = win_GetFullHandle(hwndDlg)

	if is_desktop_window(hwndDlg) == Bool32.True {
		return Bool32.False
	}

	if (hwndDlg != msg.hwnd) and isChild(hwndDlg, msg.hwnd) == Bool32.False {
		return Bool32.False
	}

	hwndDlg = dialog_FindMsgDestination(hwndDlg)
	switch msg.message {
			dlgCode = sendMessageW(msg.hwnd, 135, msg.wParam, msg as! LParam)
			if dlgCode & (4) {
				break
		// TODO Hexa: support `case 256u32:`
		case WM_KEY_DOWN:
			}
			switch msg.wParam {
				case 9:
						var fIsDialog Bool32 = not win_IsCurrentProcess(hwndDlg) or ntUserGetDialogInfo(hwndDlg) != (null)
					if (dlgCode & 2) == 0 {

							sendMessageW(hwndDlg, 40, ntUserGetKeyState(16) & 32768, 0)
						if fIsDialog == Bool32.True {
						} else {
							var hwndFocus HWnd = getFocus()
							var hwndNext HWnd = getNextDlgTabItem(hwndDlg, (hwndFocus == hwndDlg) ? (null): hwndFocus, ntUserGetKeyState(16) & 32768)

							if hwndNext != null {
								dlgCode = sendMessageW(hwndNext, 135u32, msg.wParam, msg as! LParam) as! Int32

									var buffer ClangWideChar = heapAlloc(getProcessHeap(), 0, maxlen * sizeOf<UInt32>())
								if dlgCode & 8 != 0 {
									var maxlen Int32 = 1i32 + sendMessageW(hwndNext, 14u32, null, null) as! Int32

									if buffer != null {
										var length Int32 = 0
										sendMessageW(hwndNext, 13u32, maxlen as! WParam, buffer as! LParam)
										length = lstrlenW(buffer)
										heapFree(getProcessHeap(), 0, buffer)
										sendMessageW(hwndNext, 177u32, null, length as! LParam)
									}
								}

								ntUserSetFocus(hwndNext)
								dialog_FixChildrenOnChangeFocus(hwndDlg, hwndNext)
							} else {
								return Bool32.False
							}
						}

						return Bool32.True
					}
				case 39 | 40 | 37 | 38:
					if (dlgCode & 1) == 0 {
						var fPrevious Bool32 = msg.wParam == 37u32 or msg.wParam == 38u32
						var hwndNext HWnd = getNextDlgGroupItem(hwndDlg, msg.hwnd, fPrevious)

						if hwndNext and sendMessageW(hwndNext, 135, msg.wParam, msg as! LParam) == (8192 | 64) {
							ntUserSetFocus(hwndNext)

							if (getWindowLongW(hwndNext, -16) & 15) == 9 and sendMessageW(hwndNext, 240u32, null, null) != 1i32 {
								sendMessageW(hwndNext, 245u32, 1 as! WParam, null)
							}
						} else {
							sendMessageW(hwndDlg, 40u32, hwndNext as! WParam, 1 as! LParam)
						}

						return Bool32.True
					}
				case 3 | 27:
					sendMessageW(hwndDlg, 273u32, 2 as! WParam, getDlgItem(hwndDlg, 2) as! LParam)
					return Bool32.True
				case 43 | 13:
					{
						var dw UInt32 = 0
						var hwndFocus HWnd = getFocus()

						if isChild(hwndDlg, hwndFocus) and (sendMessageW(hwndFocus, 135, 0, 0) & 16) {
							sendMessageW(hwndDlg, 273, (((((((getDlgCtrlID(hwndFocus)) as! UInt32) & 65535) as! UInt16) | (((((0) as! UInt32) & 65535) as! UInt16) as! UInt32) << 16) as! Int32) as! UInt32) as! WParam, hwndFocus as! LParam)
						} else {
							if 21323 == ((((dw = sendMessageW(hwndDlg, 1024 + 0, 0, 0)) as! UInt32) >> 16) as! UInt16) {
								var hwndDef HWnd = dialog_IdToHwnd(hwndDlg, (((dw) as! UInt32) & 65535) as! UInt16)

								if not hwndDef or isWindowEnabled(hwndDef) {
									sendMessageW(hwndDlg, 273, (((((((((((dw) as! UInt32) & 65535) as! UInt16)) as! UInt32) & 65535) as! UInt16) | (((((0) as! UInt32) & 65535) as! UInt16) as! UInt32) << 16) as! Int32) as! UInt32) as! WParam, hwndDef as! LParam)
								}
							} else {
								sendMessageW(hwndDlg, 273u32, 1 as! WParam, getDlgItem(hwndDlg, 1) as! LParam)
							}
						}
					}
					return Bool32.True
			}
			dlgCode = sendMessageW(msg.hwnd, 135, msg.wParam, msg as! LParam)
		case WM_CHAR:
			if dlgCode & (128 | 4) != 0 {
				break
			}
			if msg.wParam == 9u32 and (dlgCode & 2) != 0 {
				break
			}
			if dialog_IsAccelerator(win_GetFullHandle(msg.hwnd), hwndDlg, msg.wParam) == Bool32.True {
				return 1
		case WM_SYS_CHAR:
			}
	}

	translateMessage(msg)
	dispatchMessageW(msg)
	return Bool32.True
}

fun getDlgCtrlID(hwnd HWnd) Int32 {
	return getWindowLongW(hwnd, -12) as! Int32
}

fun getDlgItem(hwndDlg HWnd, id Int32) HWnd {
	var i Int32 = 0
	var list ArrayPointer<HWnd> = win_ListChildren(hwndDlg)
	var ret HWnd = null

	if list == null {
		return null
	}

	i = 0
	while list[i] {
		if getWindowLongW(list [i], -12) == (id as! Int32) {
			break
		}

		i++
	}

	ret = list[i]
	heapFree(getProcessHeap(), 0, list)
	return ret
}

fun sendDlgItemMessageA(
	hwnd HWnd,
	id Int32,
	msg UInt32,
	wParam WParam,
	lParam LParam
) LResult {
	var hwndCtrl HWnd = getDlgItem(hwnd, id)

	if hwndCtrl != null {
		return sendMessageA(hwndCtrl, msg, wParam, lParam)
	} else {
		return null
	}
}

fun sendDlgItemMessageW(
	hwnd HWnd,
	id Int32,
	msg UInt32,
	wParam WParam,
	lParam LParam
) LResult {
	var hwndCtrl HWnd = getDlgItem(hwnd, id)

	if hwndCtrl != null {
		return sendMessageW(hwndCtrl, msg, wParam, lParam)
	} else {
		return null
	}
}

fun setDlgItemTextA(hwnd HWnd, id Int32, lpString ConstArrayPointer<ClangChar>) Bool32 {
	return sendDlgItemMessageA(hwnd, id, 12, 0, lpString as! LParam)
}

fun setDlgItemTextW(hwnd HWnd, id Int32, lpString ConstArrayPointer<ClangWideChar>) Bool32 {
	return sendDlgItemMessageW(hwnd, id, 12, 0, lpString as! LParam)
}

fun getDlgItemTextA(
	hwnd HWnd,
	id Int32,
	str ArrayPointer<ClangChar>,
	len Int32
) UInt32 {
		str[0] = 0
	if str != null and (len > 0) {
	}

	return sendDlgItemMessageA(hwnd, id, 13u32, len as! WParam, str as! LParam) as! UInt32
}

fun getDlgItemTextW(
	hwnd HWnd,
	id Int32,
	str ArrayPointer<ClangWideChar>,
	len Int32
) UInt32 {
		str[0] = 0
	if str != null and (len > 0) {
	}

	return sendDlgItemMessageW(hwnd, id, 13u32, len as! WParam, str as! LParam) as! UInt32
}

fun setDlgItemInt(
	hwnd HWnd,
	id Int32,
	value UInt32,
	fSigned Bool32
) Bool32 {
	var str ArrayByValue<ClangChar, 20> = [0]

		sprintf(str, "%d", value as! Int32)
	if fSigned == Bool32.True {
	} else {
		sprintf(str, "%u", value)
	}

	sendDlgItemMessageA(hwnd, id, 12, 0, str as! LParam)
	return Bool32.True
}

fun getDlgItemInt(
	hwnd HWnd,
	id Int32,
	translated Bool32,
	fSigned Bool32
) UInt32 {
	var str ArrayByValue<ClangChar, 30> = [0]
	var endptr ClangChar = null
	var result Int32 = 0

	if translated != null {
		translated[0] = 0
	}

	if not sendDlgItemMessageA(hwnd, id, 13, sizeOf<UInt32>(), str as! LParam) {
		return 0
	}

		result = strtol(str, endptr, 10)
	if fSigned == Bool32.True {

		if not endptr or (endptr == str) {
			return 0
		}

		if ((result == (-2147483647 - 1)) or (result == 2147483647)) and ((_errno() [0]) == 34) {
			return 0
		}
	} else {
		result = strtoul(str, endptr, 10)

		if not endptr or (endptr == str) {
			return 0
		}

		if ((result as! UInt32) == 4294967295u32) and ((_errno() [0]) == 34) {
			return 0
		}
	}

	if translated != null {
		translated[0] = 1
	}

	return result as! UInt32
}

fun checkDlgButton(hwnd HWnd, id Int32, check UInt32) Bool32 {
	sendDlgItemMessageW(hwnd, id, 241u32, check as! WParam, null)
	return Bool32.True
}

fun isDlgButtonChecked(hwnd HWnd, id Int32) UInt32 {
	return sendDlgItemMessageW(hwnd, id, 240u32, null, null) as! UInt32
}

fun checkRB(hwndChild HWnd, lParam LParam) Bool32 {
	var lChildID Int32 = getWindowLongW(hwndChild, -12)
	var lpRadioGroup RadioGroup = lParam as! RadioGroup

	if (lChildID >= lpRadioGroup.firstID) and (lChildID <= lpRadioGroup.lastID) {
		if lChildID == lpRadioGroup.checkID {
			sendMessageW(hwndChild, 241u32, 1 as! WParam, null)
		} else {
			sendMessageW(hwndChild, 241u32, null, null)
		}
	}

	return Bool32.True
}

fun checkRadioButton(
	hwndDlg HWnd,
	firstID Int32,
	lastID Int32,
	checkID Int32
) Bool32 {
	var radioGroup RadioGroup = null
	radioGroup.firstID = firstID as! UInt32
	radioGroup.lastID = lastID as! UInt32
	radioGroup.checkID = checkID as! UInt32
	return enumChildWindows(hwndDlg, checkRB, radioGroup as! LParam)
}

fun getDialogBaseUnits() UInt32 {
	return ntUserGetDialogBaseUnits()
}

fun mapDialogRect(hwnd HWnd, rect Rect) Bool32 {
	var dlgInfo DIALOGINFO = null

	if (dlgInfo = dialog_get_info(hwnd, 0)) == null {
		return Bool32.False
	}

	rect.left = mulDiv(rect.left as! Int32, dlgInfo.xBaseUnit as! Int32, 4) as! Int32
	rect.right = mulDiv(rect.right as! Int32, dlgInfo.xBaseUnit as! Int32, 4) as! Int32
	rect.top = mulDiv(rect.top as! Int32, dlgInfo.yBaseUnit as! Int32, 8) as! Int32
	rect.bottom = mulDiv(rect.bottom as! Int32, dlgInfo.yBaseUnit as! Int32, 8) as! Int32
	return Bool32.True
}

fun getNextDlgGroupItem(hwndDlg HWnd, hwndCtrl HWnd, fPrevious Bool32) HWnd {
	var hwndDlg = hwndDlg
	var hwndCtrl = hwndCtrl
	var hwnd HWnd = null
	var hwndNext HWnd = null
	var retvalue HWnd = null
	var hwndLastGroup HWnd = null
	var fLooped Bool32 = Bool32.False
	var fSkipping Bool32 = Bool32.False
	// TODO compiles `var fSkipping Bool32 = 0`
	hwndDlg = win_GetFullHandle(hwndDlg)
	hwndCtrl = win_GetFullHandle(hwndCtrl)

	if hwndDlg == hwndCtrl {
		hwndCtrl = null
	}

	if hwndCtrl == null and fPrevious == Bool32.True {
		return null
	}

	if hwndCtrl != null {
		if isChild(hwndDlg, hwndCtrl) == Bool32.False {
			return null
		}
	} else {
		if (hwndCtrl = getWindow(hwndDlg, 5u32)) == null {
			return null
		}

		if (getWindowLongW(hwndCtrl, -16) & (268435456 | 134217728)) == 268435456 {
			return hwndCtrl
		}
	}

	retvalue = hwndCtrl
	hwnd = hwndCtrl

	while true {
		hwndNext = getWindow(hwnd, 2u32)

		while hwndNext == null {
			if hwndDlg == getParent(hwnd) {
				if fLooped == Bool32.True {
					"@goto 0x3215328"
					// TODO
				}

				fLooped = Bool32.True
				hwndNext = getWindow(hwndDlg, 5u32)
			} else {
				hwnd = getParent(hwnd)
				hwndNext = getWindow(hwnd, 2u32)
			}
		}

		hwnd = hwndNext

		while (getWindowLongW(hwnd, -20) & 65536) and ((getWindowLongW(hwnd, -16) & (268435456 | 134217728)) == 268435456) and (hwndNext = getWindow(hwnd, 5)) {
			hwnd = hwndNext
		}

		if (getWindowLongW(hwnd, -16) & 131072) != 0 {
			hwndLastGroup = hwnd

			if fSkipping == Bool32.False {
				fSkipping = Bool32.True
			}
		}

		if hwnd == hwndCtrl {
			if fSkipping == Bool32.False {
				break
			}

			if hwndLastGroup == hwnd {
				break
			}

			hwnd = hwndLastGroup
			fSkipping = Bool32.False
			fLooped = Bool32.False
		}

		if fSkipping == Bool32.False and (getWindowLongW(hwnd, -16) & (268435456 | 134217728)) == 268435456 {
			retvalue = hwnd

			if fPrevious == Bool32.False {
				break
			}
		}
	}

	// TODO
	"@label end 0x3215328"
	return retvalue
}

fun dialog_GetNextTabItem(
	hwndMain HWnd,
	hwndDlg HWnd,
	hwndCtrl HWnd,
	fPrevious Bool32
) HWnd {
	var dsStyle Int32 = 0
	var exStyle Int32 = 0
	// TODO compiles var wndSearch UInt32 = (fPrevious) ? 3u32: 2u32
	var wndSearch UInt32 = (fPrevious == Bool32.True) ? 3u32: 2u32
	var retWnd HWnd = null
	var hChildFirst HWnd = null

	if hwndCtrl == null {
		hChildFirst = getWindow(hwndDlg, 5u32)

		if fPrevious == Bool32.True {
			hChildFirst = getWindow(hChildFirst, 1u32)
		}
	} else {
		if isChild(hwndMain, hwndCtrl) == Bool32.True {
			hChildFirst = getWindow(hwndCtrl, wndSearch)

			if hChildFirst == null {
				if getParent(hwndCtrl) != hwndMain {
					hChildFirst = getWindow(getParent(hwndCtrl), wndSearch)
				} else {
					hChildFirst = getWindow(hwndCtrl, (fPrevious == Bool32.True) ? 1u32: 0 as! UInt32)
				}
			}
		}
	}

	while hChildFirst != null {
		dsStyle = getWindowLongA(hChildFirst, -16)
		exStyle = getWindowLongA(hChildFirst, -20)

		if (exStyle & 65536) and (dsStyle & 268435456) and not (dsStyle & 134217728) {
			var retWnd HWnd = null
			retWnd = dialog_GetNextTabItem(hwndMain, hChildFirst, null, fPrevious)

			if retWnd != null {
				return retWnd
			}
		} else {
			if (dsStyle & 65536) and (dsStyle & 268435456) and not (dsStyle & 134217728) {
				return hChildFirst
			}
		}

		hChildFirst = getWindow(hChildFirst, wndSearch)
	}

	if hwndCtrl != null {
		var hParent HWnd = getParent(hwndCtrl)

		while hParent != null {
			if hParent == hwndMain {
				break
			}

			retWnd = dialog_GetNextTabItem(hwndMain, getParent(hParent), hParent, fPrevious)

			if retWnd != null {
				break
			}

			hParent = getParent(hParent)
		}

		if retWnd == null {
			retWnd = dialog_GetNextTabItem(hwndMain, hwndMain, null, fPrevious)
		}
	}

	return (retWnd) ? retWnd: hwndCtrl
}

fun getNextDlgTabItem(hwndDlg HWnd, hwndCtrl HWnd, fPrevious Bool32) HWnd {
	var hwndDlg = hwndDlg
	var hwndCtrl = hwndCtrl
	hwndDlg = win_GetFullHandle(hwndDlg)
	hwndCtrl = win_GetFullHandle(hwndCtrl)

	if hwndDlg == hwndCtrl {
		hwndCtrl = null
	}

	if hwndCtrl == null and fPrevious == Bool32.True {
		return null
	}

	return dialog_GetNextTabItem(hwndDlg, hwndDlg, hwndCtrl, fPrevious)
}

fun dialog_DlgDirSelect(
	hwnd HWnd,
	str ArrayPointer<ClangWideChar>,
	len Int32,
	id Int32,
	unicode Bool32,
	combo Bool32
) Bool32 {
	var buffer ArrayPointer<ClangWideChar> = null
	var ptr ArrayPointer<ClangWideChar> = null
	var item Int32 = 0
	var size Int32 = 0
	var ret Bool32 = Bool32.False
	var listbox HWnd = getDlgItem(hwnd, id)

	if listbox == null {
		return Bool32.False
	}

	item = sendMessageW(listbox, (combo) ? 327: 392 as! UInt32, null, null) as! Int32

	if item == (-1) {
		return Bool32.False
	}

	size = sendMessageW(listbox, (combo) ? 329: 394 as! UInt32, item as! WParam, null) as! Int32

	if size == (-1) {
		return Bool32.False
	}

	if not (buffer = heapAlloc(getProcessHeap(), 0, (size + 2) * sizeOf<UInt32>())) {
		return Bool32.False
	}

	sendMessageW(listbox, (combo) ? 328: 393, item, buffer as! LParam)

	if ret = buffer[0] == 91 {
		if buffer[1] == 45 {
			buffer[3] = 58
			buffer[4] = 0
			ptr = buffer.offsetItems(2)
		} else {
			buffer[lstrlenW(buffer) - 1] = 92
			ptr = buffer.offsetItems(1)
		}
	} else {
		if wcschr(buffer, 46) == (null) {
			buffer[lstrlenW(buffer) + 1] = 0
			buffer[lstrlenW(buffer)] = 46
		}

		ptr = buffer
	}

		if len > 0 and not wideCharToMultiByte(0, 0, ptr, -1, str as! ConstArrayPointer<ClangChar>, len, 0, 0) {
			(str as! ConstArrayPointer<ClangChar>) [len - 1] = 0
	if unicode == Bool32.False {
		}
	} else {
		lstrcpynW(str, ptr, len)
	}

	heapFree(getProcessHeap(), 0, buffer as! ArrayPointer<Void>)
	return ret
}

fun dialog_DlgDirListW(
	hDlg HWnd,
	spec ArrayPointer<ClangWideChar>,
	idLBox Int32,
	idStatic Int32,
	attrib UInt32,
	combo Bool32
) Int32 {
	var spec = spec
	var attrib = attrib
	var hwnd HWnd = null
	var orig_spec ArrayPointer<ClangWideChar> = spec
	var any ArrayByValue<ClangWideChar, 4> = "*.*"
	var star ArrayByValue<ClangWideChar, 2> = "*"

	if not spec or not spec[0] or setCurrentDirectoryW(spec) {
		spec = star.ref
	} else {
		var p ArrayPointer<ClangWideChar> = null
		var p2 ArrayPointer<ClangWideChar> = null

		if not wcschr(spec, 42) and not wcschr(spec, 63) {
			setLastError(1417u32)
			return 0
		}

		p = spec

		if p2 = wcschr(p, 58) {
			p = p2.offsetItems(1)
		}

		if p2 = wcsrchr(p, 92) {
			p = p2
		}

		if p2 = wcsrchr(p, 47) {
			p = p2
		}

		if p != spec {
			var sep ClangWideChar = p[0]
			p[0] = null

			if setCurrentDirectoryW(spec) == Bool32.False {
				p[0] = sep
				return 0
			}

			spec = p.offsetItems(1)
		}
	}

	if idLBox and ((hwnd = getDlgItem(hDlg, idLBox)) != 0) {
		if attrib == 16384u32 {
			attrib |= 32768u32
		}

		{
			((attrib & 8192)) ? postMessageW(hwnd, (combo) ? 331: 388, 0, 0): sendMessageW(hwnd, (combo) ? 331: 388, 0, 0)
			// TODO castThisValueToBool ? a : b
		}

				((attrib & 8192)) ? postMessageW(hwnd, (combo) ? 325: 397, attrib & ~(16 | 16384), spec as! LParam): sendMessageW(hwnd, (combo) ? 325: 397, attrib & ~(16 | 16384), spec as! LParam)
		if attrib & 16u32 != 0 {
			if (attrib & 32768u32) == 0 {
			}

			{
				((attrib & 8192)) ? postMessageW(hwnd, (combo) ? 325: 397, (attrib & (16 | 16384)) | 32768, any as! LParam): sendMessageW(hwnd, (combo) ? 325: 397, (attrib & (16 | 16384)) | 32768, any as! LParam)
			}
		} else {
			((attrib & 8192)) ? postMessageW(hwnd, (combo) ? 325: 397, attrib, spec as! LParam): sendMessageW(hwnd, (combo) ? 325: 397, attrib, spec as! LParam)
		}
	}

	if spec != null {
		charUpperW(spec)
	}

	if idStatic and ((hwnd = getDlgItem(hDlg, idStatic)) != 0) {
		var temp ArrayByValue<ClangWideChar, 260> = [0]
		getCurrentDirectoryW(sizeOf<UInt32>() / sizeOf<UInt32>(), temp)
		charLowerW(temp.ref)
		setDlgItemTextW(hDlg, idStatic, temp.ref)
	}

	if orig_spec != null and (spec != orig_spec) {

		while (orig_spec++ [0] = p++ [0]) {
		var p = spec

			// TODO assign not allowed!
		}
	}

	return 1
}

fun dialog_DlgDirListA(
	hDlg HWnd,
	spec ArrayPointer<ClangChar>,
	idLBox Int32,
	idStatic Int32,
	attrib UInt32,
	combo Bool32
) Int32 {
	if spec != null {
		var ret Int32 = 0
		var len Int32 = multiByteToWideChar(0, 0, spec, -1, null, 0)
		var specW ClangWideChar = heapAlloc(getProcessHeap(), 0, len * sizeOf<UInt32>())
		multiByteToWideChar(0, 0, spec, -1, specW, len)
		ret = dialog_DlgDirListW(hDlg, specW, idLBox, idStatic, attrib, combo)
		wideCharToMultiByte(0, 0, specW, -1, spec, 2147483647, null, null)
		heapFree(getProcessHeap(), 0, specW)
		return ret
	}

	return dialog_DlgDirListW(hDlg, null, idLBox, idStatic, attrib, combo)
}

fun dlgDirSelectExA(
	hwnd HWnd,
	str ArrayPointer<ClangChar>,
	len Int32,
	id Int32
) Bool32 {
	return dialog_DlgDirSelect(hwnd, str as! ArrayPointer<ClangWideChar>, len, id, 0, 0)
}

fun dlgDirSelectExW(
	hwnd HWnd,
	str ArrayPointer<ClangWideChar>,
	len Int32,
	id Int32
) Bool32 {
	return dialog_DlgDirSelect(hwnd, str, len, id, Bool32.True, 0)
}

fun dlgDirSelectComboBoxExA(
	hwnd HWnd,
	str ArrayPointer<ClangChar>,
	len Int32,
	id Int32
) Bool32 {
	return dialog_DlgDirSelect(hwnd, str as! ClangWideChar, len, id, 0, 1)
}

fun dlgDirSelectComboBoxExW(
	hwnd HWnd,
	str ArrayPointer<ClangWideChar>,
	len Int32,
	id Int32
) Bool32 {
	return dialog_DlgDirSelect(hwnd, str, len, id, Bool32.True, Bool32.True)
}

fun dlgDirListA(
	hDlg HWnd,
	spec ArrayPointer<ClangChar>,
	idLBox Int32,
	idStatic Int32,
	attrib UInt32
) Int32 {
	return dialog_DlgDirListA(hDlg, spec, idLBox, idStatic, attrib, 0)
}

fun dlgDirListW(
	hDlg HWnd,
	spec ArrayPointer<ClangWideChar>,
	idLBox Int32,
	idStatic Int32,
	attrib UInt32
) Int32 {
	return dialog_DlgDirListW(hDlg, spec, idLBox, idStatic, attrib, 0)
}

fun dlgDirListComboBoxA(
	hDlg HWnd,
	spec ArrayPointer<ClangChar>,
	idCBox Int32,
	idStatic Int32,
	attrib UInt32
) Int32 {
	return dialog_DlgDirListA(hDlg, spec, idCBox, idStatic, attrib, Bool32.True)
}

fun dlgDirListComboBoxW(
	hDlg HWnd,
	spec ArrayPointer<ClangWideChar>,
	idCBox Int32,
	idStatic Int32,
	attrib UInt32
) Int32 {
	return dialog_DlgDirListW(hDlg, spec, idCBox, idStatic, attrib, Bool32.True)
}
